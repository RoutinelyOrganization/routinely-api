// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String              @id @default(uuid())
  email              String              @unique
  password           String
  permissions        String[]
  verifiedAt         DateTime?           @map("verified_at")
  acceptedAt         DateTime            @default(now()) @map("accepted_at")
  updatedAt          DateTime            @updatedAt @map("updated_at") @db.Timestamptz(3)
  createdAt          DateTime            @default(now()) @map("created_at") @db.Timestamptz(3)
  sessions           Session[]
  profile            Profile?
  resetPasswordToken ResetPasswordToken?
  tasks              Task[]
  goals              Goals[]

  @@map("accounts")
}

model ResetPasswordToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  account   Account? @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String   @unique @map("account_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
}

model Profile {
  id        Int      @id @default(autoincrement())
  name      String
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  accountId String   @unique @map("account_id")
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Session {
  id               Int      @id @default(autoincrement())
  sessionToken     String   @unique @map("session_token")
  refreshToken     String   @unique @map("refresh_token")
  accountId        String   @map("account_id")
  name             String
  permissions      String[]
  remember         Boolean  @default(false)
  sessionExpiresIn DateTime @map("session_expires_in")
  refreshExpiresIn DateTime @map("refresh_expires_in")
  updatedAt        DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  account          Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Task {
  id              Int            @id @default(autoincrement())
  name            String
  date            DateTime
  description     String
  checked         Boolean        @default(false)
  quantityPerWeek Int
  finallyDate     DateTime?
  category        TaskCategories
  type            TaskType
  weekDays        DaysOfWeek[]
  accountId       String         @map("account_id")
  account         Account        @relation(fields: [accountId], references: [id])
  updatedAt       DateTime       @updatedAt @map("updated_at") @db.Timestamptz(3)
  createdAt       DateTime       @default(now()) @map("created_at") @db.Timestamptz(3)

  @@map("tasks")
}

model Goals {
  id          Int             @id @default(autoincrement())
  description String
  goal        String
  start_date  DateTime        @db.Date
  end_date    DateTime        @db.Date
  periodicity GoalPeriodicity
  type        GoalType
  accountId   String          @map("account_id")
  account     Account         @relation(fields: [accountId], references: [id])
  updatedAt   DateTime        @updatedAt @map("updated_at") @db.Timestamptz(3)
  createdAt   DateTime        @default(now()) @map("created_at") @db.Timestamptz(3)

  @@map("goals")
}

enum GoalPeriodicity {
  daily
  weekly
  biweekly
  monthly
  bimonthly
}

enum GoalType {
  personal
  profissional
}

enum TaskPriorities {
  low
  medium
  high
  urgent
}

enum TaskTags {
  application
  account
  exercise
  beauty
  literature
}

enum TaskCategories {
  Career
  Finance
  Studies
  Health
  Leisure
  Productivity
  Several
}

enum TaskType {
  habit
  task
}

enum DaysOfWeek {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}
